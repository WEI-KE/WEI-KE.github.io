[{"categories":[null],"content":"Introduction Recently, I replaced a batch of Huawei switches and switched to using SSH for remote access, which rendered my previous Telnet script unusable. Therefore, I spent some time rewriting a multi-threaded SSH program called Multithreaded-SSH using Python. This version is still not very flexible, but it can execute some basic commands. For example, it can execute “dis cur” command combined with the “sshlog” file to backup device configurations, or perform batch password modifications. #!/usr/bin/python3 # -*- coding: UTF-8 -*- import paramiko import getpass import time import datetime import os import threading import logging success_count = 0 error_count = 0 command_error = 0 class CommandTimeoutError(Exception): pass def ssh(host='localhost', port=22, username='admin', password='admin@123', timeout=20, commands='dis ver', command_time_out=60): # 配置logging记录paramiko详细日志 logging.basicConfig(level=logging.DEBUG, filename=f'log/paramiko-{datetime.date.today()}.log', filemode='w', format='%(asctime)s - %(levelname)s - %(message)s') log_change = [] global success_count, error_count, command_error # 创建日志目录和文件 os.makedirs('log', exist_ok=True) os.makedirs('sshlog', exist_ok=True) log_file = f'log/{datetime.date.today()}.txt' sshlog_file = f'sshlog/{datetime.date.today()}-{host}.txt' # 设置密钥验证目录和文件 # os.makedirs('sshkey', exist_ok=True) # known_hosts_file = './sshkey/known_hosts' # with open(known_hosts_file, 'w') as f: # pass # 创建SSH客户端 client = paramiko.SSHClient() # 是否验证本地密钥 # client.set_missing_host_key_policy(paramiko.WarningPolicy()) # client.load_host_keys(os.path.expanduser(known_hosts_file)) # 自动添加主机密钥 client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) connected = False break_tag = False for password in password: try: # 连接SSH print(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host}') log_change.append(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host} ') # with open(log_file, 'a') as f_log: # f_log.write(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host} ') # logging.info(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host} ') client.connect(hostname=host, port=port, username=username, password=password, timeout=timeout) connected = True print(f'{host}连接成功') log_change.append(f'连接成功 ') # logging.info('连接成功') # with open(log_file, 'a') as f_log: # f_log.write(f'连接成功 ') # 创建交互式shell shell = client.invoke_shell() time.sleep(0.5) hostname = 0 output = '' while True: if shell.recv_ready(): output += shell.recv(1024).decode('utf-8') # print(f'{output}') # print(output) if '\u003c' in output and '\u003e' in output: hostname = output.splitlines()[-1][1:-1] print(hostname) log_change.append(f'{hostname} ') break if hostname \u003e 6: break hostname += 1 time.sleep(0.5) # with open(sshlog_file, 'a') as f_sshlog: # f_sshlog.write(f'{hostname[1:-1]} ') # logging.info(f'{hostname[1:-1]}') if hostname.isdigit(): print(f'获取设备名称错误跳过{host}') log_change.append(f'获取设备名称错误跳过{host}\\n') # with open(log_file, 'a') as f_log: # f_log.write(f'获取设备名称错误跳过{host}\\n') # logging.error(f'获取设备名称错误跳过{host}') break shell.send(b'screen-length 0 temporary\\n') # 设置输出长度为0，临时模式 time.sleep(1) # 等待命令执行完成 output += shell.recv(1024).decode('utf-8') # print(output) with open(sshlog_file, 'a') as f_sshlog: f_sshlog.write(output) # 清空output output = '' # 执行远程命令 for command in commands: break_count = 0 command = command.replace(r'\\n', '\\n') shell.send((command + '\\n').encode('utf-8')) time.sleep(0.5) # 等待命令执行完成 while True: if shell.recv_ready(): output += shell.recv(1024).decode('utf-8') # print(f'{output}') if '\u003c' + hostname in output: break elif '[' + hostname in output: break if break_count \u003e= command_time_out: with open(sshlog_file, 'a') as f_sshlog: f_sshlog.write(f'{output}') command_error += 1 raise CommandTimeoutError(f'{command}') break_count += 1 time.sleep(1) with open(sshlog_file, 'a') as f_sshlog: f_sshlog.write(f'{output}') # 写入日志文件 # with open(log_file, 'a') as f: # time.sleep(1.5) # # f.writ","date":"2023-06-24","objectID":"/en/2023/06/multithreaded-ssh-v0.1.1/:1:0","tags":[null],"title":"Multithreaded SSH V0.1.1","uri":"/en/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":[null],"content":"Usage Instructions Make sure there are two files named host.txt and commands.txt in the same directory as the program. As the names suggest, host.txt contains the addresses of remote hosts (one per line), and commands.txt contains the commands to be executed (one command per line). Make sure the program has permissions to create directories and files. After execution, the program will create two directories and several log files: log year-month-day.log Paramiko-year-month-day.log sshlog year-month-day-host-address.log year-month-day.log is used to store the program’s output logs, where you can see the execution status of the program. Paramiko-year-month-day.log stores the logs of Paramiko for troubleshooting SSH connections. year-month-day-host-address.log is used to store the output of each host after establishing an SSH connection. When prompted, enter the device password. The password will not be displayed in the terminal. The program will provide real-time output and summary while running, but it can be messy when dealing with multiple devices. You can check the program logs after it finishes. ","date":"2023-06-24","objectID":"/en/2023/06/multithreaded-ssh-v0.1.1/:2:0","tags":[null],"title":"Multithreaded SSH V0.1.1","uri":"/en/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":[null],"content":"Note In the current version of the program (v0.1.1), the completion of a command is determined by the prompt \u003cdevice-name or [device-name. This is mainly to adapt to network devices of brands like Huawei. If a command does not return to the prompt within 60 seconds (default time), the program will consider it as a command execution failure. For example, if the command requires inputting ‘y’, currently you can only put the combined command in one line, like save \\n y. Use \\n for line breaks. If you have other requirements, you can modify the code for handling command completion or wait for future updates. Info On some devices, the confirmation prompt times out after 30 seconds, and it will automatically cancel and return to the prompt. The program will capture this and consider the command execution successful. So, please check the sshlog logs for confirmation after the program finishes. ","date":"2023-06-24","objectID":"/en/2023/06/multithreaded-ssh-v0.1.1/:3:0","tags":[null],"title":"Multithreaded SSH V0.1.1","uri":"/en/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":[null],"content":"Update Plans Expected updates within 2 to 3 weeks: Add the ability to define commands for individual hosts. Add the ability to define termination characters for each command to adapt to different scenarios and devices. Improve code modularity for easier integration and use by other programs. Optimize code logic. Enhance code comments. Not planned for updates: Automatic password retrieval: Currently, the program requires entering the device password each time it is executed, and it will remain so in the future. I haven’t found a perfect way to store passwords. Automatic retrieval of usernames may be considered. ","date":"2023-06-24","objectID":"/en/2023/06/multithreaded-ssh-v0.1.1/:4:0","tags":[null],"title":"Multithreaded SSH V0.1.1","uri":"/en/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":[null],"content":"Conclusion I’m still a beginner in the programming world, and my code may not be great. I welcome discussions in the comments section below or direct problem submissions (issues) on GitHub. If you find this program useful, you can give it a thumbs up below or give it a star on GitHub. Thank you for your support. This article was translated by ChatGPT. ","date":"2023-06-24","objectID":"/en/2023/06/multithreaded-ssh-v0.1.1/:5:0","tags":[null],"title":"Multithreaded SSH V0.1.1","uri":"/en/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":null,"content":" Welcome to my blog, nice to meet you!🤝 ","date":"2023-05-02","objectID":"/en/2023/05/about/:0:0","tags":[],"title":"About","uri":"/en/2023/05/about/"},{"categories":null,"content":"👨‍💻 Blogger WAKE ","date":"2023-05-02","objectID":"/en/2023/05/about/:1:0","tags":[],"title":"About","uri":"/en/2023/05/about/"},{"categories":null,"content":"⛹ Interests 🎤 Dancing rap 🏀 The above are not like, the spirit is not otaku body is very otaku. ","date":"2023-05-02","objectID":"/en/2023/05/about/:2:0","tags":[],"title":"About","uri":"/en/2023/05/about/"},{"categories":null,"content":"📬 Contact me If you can find this blog then you should already have my contact information😜 Reverse the first two numbers👉6154074328@qq.com✉️ ","date":"2023-05-02","objectID":"/en/2023/05/about/:3:0","tags":[],"title":"About","uri":"/en/2023/05/about/"}]