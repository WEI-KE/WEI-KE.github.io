[{"categories":["Python"],"content":"前言 最近换了一批华为交换机，为了过等保改用SSH远程交换机，之前写的Telnet脚本用不了了， 于是最近花了点时间用Python重新写了一个多线程SSH程序 Multithreaded-SSH。 此版本还是不太灵活，但是可以执行一些基本的命令。例如可以执行dis cur配合sshlog文件做到备份设备配置，或者批量修改密码。 #!/usr/bin/python3 # -*- coding: UTF-8 -*- import paramiko import getpass import time import datetime import os import threading import logging success_count = 0 error_count = 0 command_error = 0 class CommandTimeoutError(Exception): pass def ssh(host='localhost', port=22, username='admin', password='admin@123', timeout=20, commands='dis ver', command_time_out=60): # 配置logging记录paramiko详细日志 logging.basicConfig(level=logging.DEBUG, filename=f'log/paramiko-{datetime.date.today()}.log', filemode='w', format='%(asctime)s - %(levelname)s - %(message)s') log_change = [] global success_count, error_count, command_error # 创建日志目录和文件 os.makedirs('log', exist_ok=True) os.makedirs('sshlog', exist_ok=True) log_file = f'log/{datetime.date.today()}.txt' sshlog_file = f'sshlog/{datetime.date.today()}-{host}.txt' # 设置密钥验证目录和文件 # os.makedirs('sshkey', exist_ok=True) # known_hosts_file = './sshkey/known_hosts' # with open(known_hosts_file, 'w') as f: # pass # 创建SSH客户端 client = paramiko.SSHClient() # 是否验证本地密钥 # client.set_missing_host_key_policy(paramiko.WarningPolicy()) # client.load_host_keys(os.path.expanduser(known_hosts_file)) # 自动添加主机密钥 client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) connected = False break_tag = False for password in password: try: # 连接SSH print(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host}') log_change.append(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host} ') # with open(log_file, 'a') as f_log: # f_log.write(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host} ') # logging.info(f'{datetime.datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]} 尝试连接{host} ') client.connect(hostname=host, port=port, username=username, password=password, timeout=timeout) connected = True print(f'{host}连接成功') log_change.append(f'连接成功 ') # logging.info('连接成功') # with open(log_file, 'a') as f_log: # f_log.write(f'连接成功 ') # 创建交互式shell shell = client.invoke_shell() time.sleep(0.5) hostname = 0 output = '' while True: if shell.recv_ready(): output += shell.recv(1024).decode('utf-8') # print(f'{output}') # print(output) if '\u003c' in output and '\u003e' in output: hostname = output.splitlines()[-1][1:-1] print(hostname) log_change.append(f'{hostname} ') break if hostname \u003e 6: break hostname += 1 time.sleep(0.5) # with open(sshlog_file, 'a') as f_sshlog: # f_sshlog.write(f'{hostname[1:-1]} ') # logging.info(f'{hostname[1:-1]}') if hostname.isdigit(): print(f'获取设备名称错误跳过{host}') log_change.append(f'获取设备名称错误跳过{host}\\n') # with open(log_file, 'a') as f_log: # f_log.write(f'获取设备名称错误跳过{host}\\n') # logging.error(f'获取设备名称错误跳过{host}') break shell.send(b'screen-length 0 temporary\\n') # 设置输出长度为0，临时模式 time.sleep(1) # 等待命令执行完成 output += shell.recv(1024).decode('utf-8') # print(output) with open(sshlog_file, 'a') as f_sshlog: f_sshlog.write(output) # 清空output output = '' # 执行远程命令 for command in commands: break_count = 0 command = command.replace(r'\\n', '\\n') shell.send((command + '\\n').encode('utf-8')) time.sleep(0.5) # 等待命令执行完成 while True: if shell.recv_ready(): output += shell.recv(1024).decode('utf-8') # print(f'{output}') if '\u003c' + hostname in output: break elif '[' + hostname in output: break if break_count \u003e= command_time_out: with open(sshlog_file, 'a') as f_sshlog: f_sshlog.write(f'{output}') command_error += 1 raise CommandTimeoutError(f'{command}') break_count += 1 time.sleep(1) with open(sshlog_file, 'a') as f_sshlog: f_sshlog.write(f'{output}') # 写入日志文件 # with open(log_file, 'a') as f: # time.sleep(1.5) # # f.write(f'Command: {command}\\n') # f.write(output) # # f.write('\\n\\n') # 清空output output = '' print(f'执行完成') log_change.append(f'执行完成 ') # with open(log_file, 'a') as f_log: # f_log.write(f'执行完成\\n') # logging.info('执行完成') success_count += 1 except paramiko.AuthenticationException: print(f'身份验证失败：{host}') log_change.append(f'身份验证失败：{host","date":"2023-06-22","objectID":"/2023/06/multithreaded-ssh-v0.1.1/:1:0","tags":["ssh","Python"],"title":"Multithreaded SSH V0.1.1使用说明","uri":"/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":["Python"],"content":"使用说明 确保程序同目录下有两个文件host.txt和commands.txt顾名思义，一个放置远程主机的地址（每行一个），另一个放置要执行的命令（每行一条） 确保程序有创建目录和文件的权限，程序执行后会创建两个目录和数个日志文件 log 年-月-日.log Paramiko-年-月-日.log sshlog 年-月-日-主机地址.log 年-月-日.log用于保存本程序输出的日志，你可以在这里看到本程序的执行情况 Paramiko-年-月-日.log储存Paramiko执行的日志用于ssh连接出现异常调试 年-月-日-主机地址.log用于储存ssh连接到主机后每台主机输出的内容 打开程序后会提示输入设备密码，密码输入时不会显示在终端。 程序运行时会实时输出一些信息及总结，但是设备多的时候会比较乱，可以结束后看程序日志。 ","date":"2023-06-22","objectID":"/2023/06/multithreaded-ssh-v0.1.1/:2:0","tags":["ssh","Python"],"title":"Multithreaded SSH V0.1.1使用说明","uri":"/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":["Python"],"content":"注意： 目前版本的程序v0.1.1命令执行完成以\u003c设备名或者[设备名提示符作为中断判断,主要为了适配华为等品牌网络设备。 如果某条命令执行后不会回到提示符命令会执行失败，默认超时时间60秒。例如你要执行的命令执行后有需要输入y等，目前只能将组合命令放在一行里，如save \\n y 用\\n代表回车，如有其他需求请自行修改判断代码， 或者等后续版本（后面有更新计划）。 信息 按y确认在某些设备上超时时间是30秒，30秒后会自动取消回到提示符，然后被程序捕获，此时程序会认为命令执行成功。 所以请在程序执行后检查sshlog日志确认。 ","date":"2023-06-22","objectID":"/2023/06/multithreaded-ssh-v0.1.1/:3:0","tags":["ssh","Python"],"title":"Multithreaded SSH V0.1.1使用说明","uri":"/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":["Python"],"content":"更新计划 预计在2到3周内更新： 增加独立定义单条命令终止符以适配更多场景和设备 增加独立定义单台主机命令 代码更加模块化 使其更易于被其他程序调用和集成 优化代码逻辑 完善代码备注 不会更新的内容： 自动读取密码 目前是程序每次执行都需要输入设备密码，以后也是。因为没有想到完美的密码存储方式。自动读取用户名也许会加 ","date":"2023-06-22","objectID":"/2023/06/multithreaded-ssh-v0.1.1/:4:0","tags":["ssh","Python"],"title":"Multithreaded SSH V0.1.1使用说明","uri":"/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":["Python"],"content":"结语 本人还在编程新手村晃荡 代码写的很烂，欢迎在下方评论区交流，或者直接在Github上提交问题（issues）。 如果觉得本程序还不错，可以在下方点个👍也可以去Github点个⭐，感谢支持。 ","date":"2023-06-22","objectID":"/2023/06/multithreaded-ssh-v0.1.1/:5:0","tags":["ssh","Python"],"title":"Multithreaded SSH V0.1.1使用说明","uri":"/2023/06/multithreaded-ssh-v0.1.1/"},{"categories":null,"content":"最近，AI图像生成引人注目，它能够根据文字描述生成精美图像，这极大地改变了人们的图像创作方式。Stable Diffusion作为一款高性能模型，它生成的图像质量更高、运行速度更快、消耗的资源以及内存占用更小，是AI图像生成领域的里程碑。本篇文章作者将手把手教大家入门 Stable Diffusion。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:0:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"01 硬件要求 本篇我们将详细讲解SD模型的使用教程，各位读者可以在公众号后台回复 「AIGC」 直接获取模型以及实现快速部署的GPU服务器限量优惠券。 腾讯云开发者 腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。 建议使用不少于 16GB 内存，并有 60GB 以上的硬盘空间。需要用到 CUDA架构，推荐使用 N 卡。（目前已经有了对 A 卡的相关支持，但运算的速度依旧明显慢于N卡，参见： Install and Run on AMD GPUs · AUTOMATIC1111/stable-diffusion-webui Wiki · GitHub。） 注意：过度使用，显卡会有损坏的风险。进行 512x 图片生成时主流显卡速度对比： ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:1:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"02 环境部署 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:2:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"2.1 手动部署 可以参考 webui 的官方 wiki 部署： Home · AUTOMATIC1111/stable-diffusion-webui Wiki (github.com) stable diffusion webui 的完整环境占用空间极大，能达到几十 G。值得注意的是，webui 需要联网下载安装大量的依赖，在境内网络环境下载较慢。 接下来是手动部署的6个步骤： 1、安装 Python 安装 Python 3.10，安装时须选中 Add Python to PATH 2、安装 Git 在 Git-scm.com 下载 Git 安装包并安装。下载 webui 的 github 仓库，按下 win+r 输入 cmd，调出命令行窗口。运行下方代码，并请把代码中的 PATH_TO_CLONE 替换为自己想下载的目录。 cd PATH_TO_CLONE git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git 3、装配模型 可在如 Civitai 上下载标注有 CKPT 的模型，有模型才能作画。下载的模型放入下载后文件路径下的 models/Stable-diffusion 目录。 4、使用 双击运行 webui-user.bat 。脚本会自动下载依赖，等待一段时间（可能很长），程序会输出一个类似 http://127.0.0.1:7860/ 的地址，在浏览器中输入这个链接开即可。详细可参见模型使用。 5、更新 按下 win+r 输入 cmd，调出命令行窗口。运行下方，并请把代码中的 PATH_TO_CLONE 替换为自己下载仓库的目录。 cd PATH_TO_CLONE git pull ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:2:1","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"2.2 自动整合包 觉得上述步骤麻烦的开发者可以直接使用整合包，解压即用。 比如独立研究员的空间下经常更新整合包。秋叶的启动器也非常好用，将启动器复制到下载仓库的目录下即可，更新管理会更方便。 打开启动器后，可一键启动： 如果有其它需求，可以在高级选项中调整配置。 显存优化根据显卡实际显存选择，不要超过当前显卡显存。不过并不是指定了显存优化量就一定不会超显存，在出图时如果启动了过多的优化项（如高清修复、人脸修复、过大模型）时，依然有超出显存导致出图失败的几率。 xFormers 能极大地改善内存消耗和速度，建议开启。准备工作完毕后，点击一键启动即可。等待浏览器自动跳出，或是控制台弹出本地 URL 后说明启动成功。 如果报错提示缺少 Pytorch，则需要在启动器中点击配置。 Stable Diffusion webui 的更新比较频繁，请根据需求在“版本管理”目录下更新： 同样地，也请注意插件的更新： ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:2:2","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"03 关于插件 Stable Diffusion 可配置大量插件扩展，在 webui 的“扩展”选项卡下，可以安装插件： 点击「加载自」后，目录会刷新。选择需要的插件点击右侧的 install 即可安装。 安装完毕后，需要重新启动用户界面： ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:3:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"04 文生图最简流程——重点步骤与参数 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:4:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"4.1 重点步骤 主要是4步骤： 1、选择需要使用的模型（底模），这是对生成结果影响最大的因素，主要体现在画面风格上。 2、在第一个框中填入提示词（Prompt），对想要生成的东西进行文字描述。 3、在第二个框中填入负面提示词（Negative prompt)，对不想要生成的东西进行文字描述。 4、选择采样方法、采样次数、图片尺寸等参数。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:4:1","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"4.2 参数 知道完大致的步骤后，下面我们来介绍一些重要的参数，选择不同将会带来较大差异： Sampler（采样器/采样方法）选择使用哪种采样器？ Euler是最简单、最快的。 Euler a（Eular ancestral）可以以较少的步数产生很大的多样性，不同的步数可能有不同的结果。而非 ancestral 采样器都会产生基本相同的图像。DPM 相关的采样器通常具有不错的效果，但耗时也会相应增加。Euler a 更多样，不同步数可以生产出不同的图片。但是太高步数(\u003e30)效果不会更好。 DDIM收敛快，但效率相对较低，因为需要很多 step 才能获得好的结果，适合在重绘时候使用。 LMS是 Euler 的衍生，它们使用一种相关但稍有不同的方法（平均过去的几个步骤以提高准确性）。大概 30 step 可以得到稳定结果 PLMS是 Euler 的衍生，可以更好地处理神经网络结构中的奇异性。 DPM2是一种神奇的方法，它旨在改进 DDIM，减少步骤以获得良好的结果。它需要每一步运行两次去噪，它的速度大约是 DDIM 的两倍，生图效果也非常好。但是如果你在进行调试提示词的实验，这个采样器可能会有点慢了。 UniPC效果较好且速度非常快，对平面、卡通的表现较好，推荐使用。 Sampling Steps（采样步数） Stable Diffusion 的工作方式是从以随机高斯噪声起步，向符合提示的图像一步步降噪接近。随着步数增多，可以得到对目标更小、更精确的图像。但增加步数也会增加生成图像所需的时间。增加步数的边际收益递减，取决于采样器。一般开到 20~30。 不同采样步数与采样器之间的关系： CFG Scale（提示词相关性） 图像与你的提示的匹配程度。增加这个值将导致图像更接近你的提示，但它也在一定程度上降低了图像质量。 可以用更多的采样步骤来抵消。过高的 CFG Scale 体现为粗犷的线条和过锐化的图像。一般开到 7~11。 CFG Scale 与采样器之间的关系： 生成批次 每次生成图像的组数。一次运行生成图像的数量为“批次* 批次数量”。 每批数量 同时生成多少个图像。增加这个值可以提高性能，但也需要更多的显存。大的 Batch Size 需要消耗巨量显存。若没有超过 12G 的显存，请保持为 1。 尺寸 指定图像的长宽。出图尺寸太宽时，图中可能会出现多个主体。1024 之上的尺寸可能会出现不理想的结果，推荐使用小尺寸分辨率+高清修复（Hires fix)。 种子 种子决定模型在生成图片时涉及的所有随机性，它初始化了 Diffusion 算法起点的初始值。 理论上，在应用完全相同参数（如 Step、CFG、Seed、prompts）的情况下，生产的图片应当完全相同。 高清修复 通过勾选 “Highres. fix” 来启用。默认情况下，文生图在高分辨率下会生成非常混沌的图像。如果使用高清修复，会型首先按照指定的尺寸生成一张图片，然后通过放大算法将图片分辨率扩大，以实现高清大图效果。最终尺寸为（原分辨率* 缩放系数 Upscale by）。 放大算法中，Latent 在许多情况下效果不错，但重绘幅度小于 0.5 后就不甚理想。ESRGAN_4x、SwinR 4x 对 0.5 以下的重绘幅度有较好支持。 Hires step 表示在进行这一步时计算的步数。 Denoising strength 字面翻译是降噪强度，表现为最后生成图片对原始输入图像内容的变化程度。该值越高，放大后图像就比放大前图像差别越大。低 denoising 意味着修正原图，高 denoising 就和原图就没有大的相关性了。一般来讲阈值是 0.7 左右，超过 0.7 和原图基本上无关，0.3 以下就是稍微改一些。实际执行中，具体的执行步骤为 Denoising strength * Sampling Steps。 面部修复 修复画面中人物的面部，但是非写实风格的人物开启面部修复可能导致面部崩坏。点击“生成”即可。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:4:2","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"05 提示词 提示词所做的工作是缩小模型出图的解空间，即缩小生成内容时在模型数据里的检索范围，而非直接指定作画结果。 提示词的效果也受模型的影响，有些模型对自然语言做特化训练，有些模型对单词标签对特化训练，那么对不同的提示词语言风格的反应就不同。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:5:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"5.1 提示词内容 提示词中可以填写以下内容： 类型 要求 自然语言 可以使用描述物体的句子作为提示词。大多数情况下英文有效，也可以使用中文。避免复杂的语法。 单词标签 可以使用逗号隔开的单词作为提示词。一般使用普通常见的单词。单词的风格要和图像的整体风格搭配，否则会出现混杂的风格或噪点。避免出现拼写错误。可参考 Tags Emoji 颜文字 Emoji (💰👨👩🎅👼🍟🍕) 表情符号也是可以使用并且非常准确的。因为Emoji只有一个字符，所以在语义准确度上表现良好。关于 emoji 的确切含义，可以参考 Emoji List, v15.0 (unicode.org) 值得注意的是，Emoji 在构图上有影响。举个例子，💐👩💐输出后： 对于使用 Danbooru 数据的模型来说，可以使用西式颜文字在一定程度上控制出图的表情。如：:-) 微笑 :-( 不悦 ;-) 使眼色 :-D 开心 : -P 吐舌头 :-C 很悲伤 :-O 惊讶 张大口 :-/ 怀疑 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:5:1","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"5.2 提示词语法 根据自己想画的内容写出提示词，多个提示词之间使用英文半角符号 [ , ]，如： masterpiece, best quality, ultra-detailed, illustration, close-up, straight on, face focus, 1girl, white hair, golden eyes, long hair, halo, angel wings, serene expression, looking at viewer 一般而言，概念性的、大范围的、风格化的关键词写在前面，叙述画面内容的关键词其次，最后是描述细节的关键词，大致顺序如： (画面质量提示词), (画面主题内容)(风格), (相关艺术家), (其他细节) 不过在模型中，每个词语本身自带的权重可能有所不同。如果模型训练集中较多地出现某种关键词，在提示词中只输入一个词就能极大地影响画面。 反之如果模型训练集中较少地出现某种关键词，在提示词中可能输入很多个相关词汇都对画面的影响效果有限。提示词的顺序很重要，越靠后的权重越低。关键词最好具有特异性，譬如 Anime(动漫)一词就相对泛化，而 Jojo 一词就能清晰地指向 Jojo 动漫的画风。措辞越不抽象越好，尽可能避免留下解释空间的措辞。 可以使用括号人工修改提示词的权重，方法如： (word)- 将权重提高 1.1 倍 ((word))- 将权重提高 1.21 倍（= 1.1 * 1.1） [word] - 将权重降低至原先的 90.91% (word:1.5)- 将权重提高 1.5 倍 (word:0.25)- 将权重减少为原先的 25% (word) - 在提示词中使用字面意义上的 () 字符 ( n ) = ( n : 1.1 ) (( n )) = ( n : 1.21 ) ((( n ))) = ( n : 1.331 ) (((( n )))) = ( n : 1.4641 ) ((((( n )))) = ( n : 1.61051 ) (((((( n )))))) = ( n : 1.771561 ) 请注意，权重值最好不要超过 1.5。 还可以通过 Prompt Editing 使得 AI 在不同的步数生成不一样的内容，譬如在某阶段后，绘制的主体由男人变成女人。 语法为： [to:when] 在指定数量的 step 后，将to处的提示词添加到提示 [from::when] 在指定数量的 step 后从提示中删除 from处的提示词 [from:to:when] 在指定数量的 step 后将 from处的提示词替换为 to处的提示词 例1: a [fantasy:cyberpunk:16] landscape 在一开始，读入的提示词为：the model will be drawing a fantasy landscape. 在第 16 步之后,提示词将被替换为：a cyberpunk landscape, 它将继续在之前的图像上计算 例2： 对于提示词为: fantasy landscape with a [mountain:lake:0.25] and [an oak:a christmas tree:0.75][ in foreground::0.6][ in background:0.25] [shoddy:masterful:0.5]，100 步采样， 一开始。提示词为：fantasy landscape with a mountain and an oak in foreground shoddy 在第 25 步后，提示词为：fantasy landscape with a lake and an oak in foreground in background shoddy 在第 50 步后，提示词为：fantasy landscape with a lake and an oak in foreground in background masterful 在第 60 步后，提示词为：fantasy landscape with a lake and an oak in background masterful 在第 75 步后，提示词为：fantasy landscape with a lake and a christmas tree in background masterful 提示词还可以轮转，譬如 [cow|horse] in a field 在第一步时，提示词为“cow in a field”；在第二步时，提示词为\"horse in a field.\"；在第三步时，提示词为\"cow in a field\" ，以此类推。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:5:2","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"5.3 Token 实际上，程序是将输入的关键词以 Token 的形式传入模型进行计算的： “ (Medieval astronomer using a telescope with a cosmic starry sky in the background.sketch, hand draw style, con, uncomplicated background )” 转换为 Token ID 即：263, 10789, 40036, 1996, 320, 19037, 593, 320, 18304, 30963, 2390, 530, 518, 5994, 8, 11, 263, 5269, 267, 2463, 4001, 1844, 267, 5646, 267, 569, 16621, 5994, 264 。 一个单词可能对应一个或多个 Token，多个单词也可能对应同一个 Token。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:5:3","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"5.4 提示词模板 可参考 Civitai | Stable Diffusion models, embeddings, hypernetworks and more 中优秀作品的提示词作为模板。类似的网站还有： Majinai：MajinAI | Home 词图：词图 PromptTool - AI 绘画资料管理网站 Black Lily：black_lily Danbooru 标签超市：Danbooru 标签超市 魔咒百科词典：魔咒百科词典 AI 词汇加速器：AI 词汇加速器 AcceleratorI Prompt NovelAI 魔导书：NovelAI 魔导书 鳖哲法典：鳖哲法典 Danbooru tag：Tag Groups Wiki | Danbooru(donmai.us) AIBooru：AIBooru: Anime Image Board ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:5:4","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"06 Controlnet Controlnet 允许通过线稿、动作识别、深度信息等对生成的图像进行控制。请注意，在使用前请确保 ControlNet 设置下的路径与本地 Stable Diffusion 的路径同步。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:6:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"6.1 基本流程 点击 Enable 启用该项 ControlNet Preprocessor 指预处理器，它将对输入的图像进行预处理。如果图像已经符合预处理后的结果，请选择 None。譬如，图中导入的图像已经是 OpenPose 需要的骨架图，那么 preprocessor 选择 none 即可。 在 Weight 下，可以调整该项 ControlNet 的在合成中的影响权重，与在 prompt 中调整的权重类似。Guidance strength 用来控制图像生成的前百分之多少步由 Controlnet 主导生成，这点与[:]语法类似。 Invert Input Color 表示启动反色模式，如果输入的图片是白色背景，开启它。 RGB to BGR 表示将输入的色彩通道信息反转，即 RGB 信息当做 BGR 信息解析，只是因为 OpenCV 中使用的是 BGR 格式。如果输入的图是法线贴图，开启它。 Low VRAM 表示开启低显存优化，需要配合启动参数“–lowvram”。 Guess Mode 表示无提示词模式，需要在设置中启用基于 CFG 的引导。 Model 中请选择想要使用解析模型，应该与输入的图像或者预处理器对应。请注意，预处理器可以为空，但模型不能为空。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:6:1","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"6.2 可用预处理/模型 canny：用于识别输入图像的边缘信息。 depth：用于识别输入图像的深度信息。 hed：用于识别输入图像的边缘信息，但边缘更柔和。 mlsd：用于识别输入图像的边缘信息，一种轻量级的边缘检测。它对横平竖直的线条非常敏感，因此更适用于于室内图的生成。 normal：用于识别输入图像的法线信息。 openpose：用于识别输入图像的动作信息。 OpenPose Editor插件可以自行修改姿势，导出到文生图或图生图。 scribble：将输入图像作为线稿识别。如果线稿是白色背景，务必勾选“Invert Input Color” fake_scribble：识别输入图像的线稿，然后再将它作为线稿生成图像。 segmentation：识别输入图像各区域分别是什么类型的物品，再用此构图信息生成图像。 如果想绘制一张符合 segementation 规范的图像，可以使用以下色表绘制。 color_coding_semantic_segmentation_classes - Google 表格 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:6:2","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"6.3 多ControlNet合成 在 ControlNet 的设置下，可以调整可用 ControlNet 的数量。 在多个 ControlNet 模式下，结果会将输入的信息合并生成图像： ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:6:3","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"07 模型：从下载、安装、使用到训练 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:7:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"7.1 模型下载 模型能够有效地控制生成的画风和内容。常用的模型网站有： Civitai | Stable Diffusion models, embeddings, hypernetworks and more Models - Hugging Face SD - WebUI 资源站 元素法典 AI 模型收集站 - AI 绘图指南 wiki(aiguidebook.top) AI 绘画模型博物馆(subrecovery.top) ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:7:1","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"7.2 模型安装 下载模型后需要将之放置在指定的目录下，请注意，不同类型的模型应该拖放到不同的目录下。模型的类型可以通过 Stable Diffusion 法术解析检测。 大模型（Ckpt）：放入 models\\Stable-diffusion VAE 模型： 一些大模型需要配合 vae 使用，对应的 vae 同样放置在 models\\Stable-diffusion 或 models\\VAE 目录，然后在 webui 的设置栏目选择。 Lora/LoHA/LoCon 模型：放入 extensions\\sd-webui-additional-networks\\models\\lora， 也可以在 models/Lora 目录 Embedding 模型：放入 embeddings 目录 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:7:2","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"7.3 模型使用 Checkpoint(ckpt)模型 对效果影响最大的模型。在 webui 界面的左上角选择使用。 一些模型会有触发词，即在提示词内输入相应的单词才会生效。 Lora 模型 / LoHA 模型 / LoCon 模型 对人物、姿势、物体表现较好的模型，在 ckpt 模型上附加使用。在 webui 界面的 Additional Networks 下勾线 Enable 启用，然后在 Model 下选择模型，并可用 Weight 调整权重。权重越大，该 Lora 的影响也越大。不建议权重过大（超过1.2），否则很容易出现扭曲的结果。 多个 lora 模型混合使用可以起到叠加效果，譬如一个控制面部的 lora 配合一个控制画风的 lora 就可以生成具有特定画风的特定人物。因此可以使用多个专注于不同方面优化的 Lora，分别调整权重，结合出自己想要实现的效果。 LoHA 模型是一种 LORA 模型的改进。LoCon 模型也一种 LORA 模型的改进，泛化能力更强。 Embedding 对人物、画风都有调整效果的模型。在提示词中加入对应的关键词即可。大部分Embedding模型的关键词与文件名相同，譬如一个名为为“SomeCharacter.pt”的模型，触发它的关键词检索“SomeCharacter”。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:7:3","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"7.4 模型训练 7.4.1 环境搭建 以 GitHub - bmaltais/kohya_ss 为例，它提供了在 Windows 操作系统下的 GUI 训练面板。如果需要在 Linux 上部署且需要 GUI，请参考 GitHub - P2Enjoy/kohya_ss-docker: This is the tandem repository to exploit on linux the kohya_ss training webui converted to Linux. It uses the fork in the following link 需要保证设备拥有 Python 3.10.6 及 git 环境。 首先，以管理员模式启动Powershell，执行“Set-ExecutionPolicy Unrestricted”命令，并回答“A\"。然后可以关闭该窗口。 其次，启动一个普通的 Powershell 窗口，在需要克隆该仓库的路径下，执行以下命令： git clone https://github.com/bmaltais/kohya_ss.git cd kohya_ss python -m venv venv .\\venv\\Scripts\\activate pip install torch==1.12.1+cu116 torchvision==0.13.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 pip install --use-pep517 --upgrade -r requirements.txt pip install -U -I --no-deps https://github.com/C43H66N12O12S2/stable-diffusion-webui/releases/download/f/xformers-0.0.14.dev0-cp310-cp310-win_amd64.whl cp .\\bitsandbytes_windows\\*.dll .\\venv\\Lib\\site-packages\\bitsandbytes\\ cp .\\bitsandbytes_windows\\cextension.py .\\venv\\Lib\\site-packages\\bitsandbytes\\cextension.py cp .\\bitsandbytes_windows\\main.py .\\venv\\Lib\\site-packages\\bitsandbytes\\cuda_setup\\main.py accelerate config 在执行“accelerate config”后，它将询问一些设置选项。请按照以下选项依次选择： This machine No distributed training NO NO NO all fp16 30 系、40 系显卡可选择安装 CUDNN： .\\venv\\Scripts\\activate python .\\tools\\cudann_1.8_install.py 7.4.2 环境更新 如果需要更新仓库，请执行以下命令： git pull .\\venv\\Scripts\\activate pip install --use-pep517 --upgrade -r requirements.txt 7.4.3 界面启动 在 Powershell 中执行： .\\**gui**.ps1 双击 gui.bat 也可以。弹出以下界面后，直接访问 URL 即可。 7.4.4 训练流程 模型训练主要有三种结果：欠拟合、效果好、过拟合。 欠拟合：模型完全没有从数据集中学习到经验，对各种输入都得出差距很大的结果。 效果好：模型不仅对训练集中的输入有接近的结果，对不来自训练集中的输入也有接近的效果。 过拟合：模型只训练集中的输入有非常非常接近的结果，对不来自训练集中的输入给出差距很大的结果。 **接下来开始讲训练流程，主要会有6步：准备训练集、图片裁剪、图片打标、正则化、文件路径组织、训练参数。**其中，训练参数（也即第6步）我们会展开讲述。 7.4.4.1 准备训练集 图片尽可能高清，风格统一但内容形式多样（譬如动作多样、服装多样）。 样本数量可能影响到拟合结果。样本量太少，模型可能欠拟合；样本量过大，模型可能过拟合。（譬如让一个人学习英语，只给他几条例句去看，他可能什么都没学会【欠拟合】；给了它几十亿条例句去看，他可能只会根据别人说的话查字典一样回话，如果字典里没有就完全不会说了【过拟合】）。 7.4.4.2 图片裁剪 将训练集裁剪为多个尺寸相同的图片。可以在 SD webui 界面中自动裁剪，也可以手动裁切。 一般使用的图片尺寸是 512*512，也可更换为其他尺寸，尺寸越大占用显存越高，但对细节的捕捉也会越好。 7.4.4.3 图片打标 我们先说关键词生成，再讲关键词合并、编组。 关键词生成 可以在训练环境的页面下打标： 也可以在 sd webui 的页面下打标： 比较这几种不同的打标器的效果，在同一输入下： 【本义：一个在铁匠铺里打铁的男铁匠】 打标器 效果 效果（中文翻译） Stable Diffusion webui-训练-图像预处理-BLIP a man in a kitchen with a fire in the fireplace and a hammer in his hand and a hammer in his other hand 一个男人在厨房里，壁炉里生着火，手里拿着锤子，另一只手拿着锤子 Stable Diffusion webui-训练-图像预处理-deepbooru 1boy, black_gloves, gloves, indoors, male_focus, shirt, short_sleeves, solo 一个男孩，黑色手套，手套，室内，男人特写，衬衫，短袖，单人 Stable Diffusion webui-Tagger(WD14) 1boy, cooking, frying pan, male focus, solo, gloves, apron, fire, brown footwear, black gloves, boots, stove, kitchen, holding, facial hair, bandana, blue shirt, shirt 一个男孩，烹饪，煎锅，男人特写，单人，手套，围裙，火，棕色鞋，黑色手套，靴子，炉子，厨房，握着，胡子，头巾，蓝色衬衫，衬衫 kohya webui-Utilities-Captioning-BLIP Captioning a man is working on a piece of metal 一个男人正在加工一块金属 kohya webui-Utilities-Captioning-GIT Captioning a drawing of a blacksmith with a hammer and a glove on his hand. 一幅画，画的是一个手上戴着手套、拿着锤子的铁匠。 打标对图片的描述越准越好，如果条件允许，尝试人工打标。 关键词合并 在生成出的关键词中，我们需要把与训练目标强相关的关键词划为一个统一的特征表述。 以*“1boy, cooking, frying pan, male focus, solo, gloves, apron, fire, brown footwear, black gloves, boots, stove, kitchen, holding, facial hair, bandana, blue shirt, shirt”* 为例，假如我们的训练对象就是一个男性大胡子，那么他必然始终携带着”男人、胡子“这两个要素，那么我们可以用一个词总结这个角色，例如用”Smith“替代”1boy,facial hair\"，整条句子将变为： 原关键词：1boy, cooking, frying pan, male focus, solo, gloves, apron, fire, brown footwear, black gloves, boots, stove, kitchen, holding, facial hair, bandana, blue shirt, shirt ' 合并后：Smith, cooking, frying pan, male focus, solo, gloves, apron, fire, brown footwear, black gloves, boots, stove, kitchen, holding, bandana, blue shirt, shirt` 以此类推，我们需要为目标绑定什么要素，就将它从关键词中删去。而类似于动作、背景这种与对象绑定关系不紧密，在日后生成图期间需要改变的，就保留在关键词中。 编组 一些具有同组关系的图片可以利用关键词引导 AI 去归纳它们。譬如，我们训练的对象 Smith 有三张图，分别是全图、背景、前景，那么我可以如此处理： Smith, Smith_group1, cooking, frying pan, male focus, solo, gloves, apron, fire, brown footwear, black gloves, boots, stove, kitchen, holding, ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:7:4","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"08 风格训练与人物训练 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:8:0","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"8.1 风格训练 训练集尽可能包含该画风对不同事物的描绘。有几个要点： 尽可能对训练集进行正则化。如果数据足够大，可以将数据二分，一部分作为训练集，一部分作为正则化图集。如果数据不够大，可以先用高学习率快速训练出一个临时模型，用它产出接近于该画风的图片，然后将它投入训练集。 如果是小模型，可以在生成时变更大模以调整生成效果；如果是大模型，可以通过模型融合以调整效果。 模型效果不好不一定是模型不好，提示词与最终的效果有非常大的关系。 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:8:1","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":null,"content":"8.2 人物训练 训练集尽可能包含人物在不同角度的画面。如果人物图像很少，可以通过以下的方式扩充训练集： 镜像 用高学习率快速训练出一个临时模型，用它产出人物的新图，将新图投入训练集 以上是本次分享全部内容，欢迎大家在评论区分享交流。 参考材料 https://wandb.ai/yepster/tpu-t5-base/reports/Adafactor-learning-rate-0-005-seems-best-for-t5-base-training--VmlldzoxNTgyODIw https://arxiv.org/pdf/2301.07733.pdf https://github.com/google/automl/tree/master/lion https://medium.com/analytics-vidhya/nlp-text-encoding-a-beginners-guide-fa332d715854 https://medium.com/analytics-vidhya/painting-sketches-with-ml-33a3ece74d31 https://github.com/XavierXiao/Dreambooth-Stable-Diffusion/ https://github.com/KohakuBlueleaf/LyCORIS https://www.crosslabs.org//blog/diffusion-with-offset-noise -End- 原创作者｜黄志翔 技术责编｜黄志翔 ","date":"2023-05-28","objectID":"/2023/05/stable-diffusion/:8:2","tags":["AI","Stable Diffusion"],"title":"Stable Diffusion 保姆级入门手册","uri":"/2023/05/stable-diffusion/"},{"categories":[],"content":" 一次偶然发现Ubuntu在输出报错信息 print_req_error: I/0 error, dev fd0, sector 0 ，查了一下是软驱相关报错，找了一个解决方案如下： ","date":"2023-05-15","objectID":"/2023/05/unbuntu-print_req_error/:0:0","tags":["Ubuntu"],"title":"print_req_error: I/0 error, dev fd0, sector 0","uri":"/2023/05/unbuntu-print_req_error/"},{"categories":[],"content":"Step 1 第一步 let’s list the block devices 列出块设备 lsblk if you are not using any floppy disk, there is no reason to have fd0 listed in the output of the command above. 如果你没有使用任何软盘，则在输出中不应出现fd0。 ","date":"2023-05-15","objectID":"/2023/05/unbuntu-print_req_error/:1:0","tags":["Ubuntu"],"title":"print_req_error: I/0 error, dev fd0, sector 0","uri":"/2023/05/unbuntu-print_req_error/"},{"categories":[],"content":"Step 2第二步 rmmod floppy “rmmod is a simple program which removes (unloads) a module from the Linux kernel.” Now run step 1 again to verify that the fd0 is no longer listed. rmmod是一个简单程序，它从Linux内核中删除（卸载）一个模块。再次执行第一步，检查fd0是否被删除。 ","date":"2023-05-15","objectID":"/2023/05/unbuntu-print_req_error/:2:0","tags":["Ubuntu"],"title":"print_req_error: I/0 error, dev fd0, sector 0","uri":"/2023/05/unbuntu-print_req_error/"},{"categories":[],"content":"Step 3第三步 Run the following command to make the changes permanent 运行以下命令以使更改永久生效 echo \"blacklist floppy\" | sudo tee /etc/modprobe.d/blacklist-floppy.conf This command just create a file name blacklist-floppy.conf in the /etc/modprobe.d folder and appends the text “blacklist floppy” to it. 此命令在 /etc/modprobe.d 文件夹中创建一个文件名 blacklist-floppy.conf，并将文本\"blacklist floppy\"附加到该文件夹中。 ","date":"2023-05-15","objectID":"/2023/05/unbuntu-print_req_error/:3:0","tags":["Ubuntu"],"title":"print_req_error: I/0 error, dev fd0, sector 0","uri":"/2023/05/unbuntu-print_req_error/"},{"categories":[],"content":"Step 4第四步 The last step is to reconfigure the kernel 最后一步是重新配置内核 dpkg-reconfigure initramfs-tools ","date":"2023-05-15","objectID":"/2023/05/unbuntu-print_req_error/:4:0","tags":["Ubuntu"],"title":"print_req_error: I/0 error, dev fd0, sector 0","uri":"/2023/05/unbuntu-print_req_error/"},{"categories":["Esxi"],"content":" 之前折腾usb硬盘安装esxi遇到的一些问题 ","date":"2023-05-03","objectID":"/2023/05/esxi-an-zhuang/:0:0","tags":["Esxi","硬件直通"],"title":"ESXI相关","uri":"/2023/05/esxi-an-zhuang/"},{"categories":["Esxi"],"content":"挂载USB存储： 在不接入USB硬盘的情况下输入以下命令： /etc/init.d/usbarbitrator stop chkconfig usbarbitrator off 接入硬盘 esxcli storage core device list |grep -i usb 查看分区表 cd /dev/disks/ partedUtil getptbl mpx.vmhba32:C0:T0:L0 示例 ： [root@localhost:/dev/disks] partedUtil getptbl mpx.vmhba32:C0:T0:L0 gpt 31130 255 63 500118192 1 64 204863 C12A7328F81F11D2BA4B00A0C93EC93B systemPartition 128 5 208896 8595455 EBD0A0A2B9E5443387C068B6B72699C7 linuxNative 0 6 8597504 16984063 EBD0A0A2B9E5443387C068B6B72699C7 linuxNative 0 创建新分区 partedUtil setptbl mpx.vmhba32:C0:T0:L0 gpt \\ \"1 64 204863 C12A7328F81F11D2BA4B00A0C93EC93B 128\" \\ \"5 208896 8595455 EBD0A0A2B9E5443387C068B6B72699C7 0\" \\ \"6 8597504 16984063 EBD0A0A2B9E5443387C068B6B72699C7 0\" \\ \"3 16984064 500118158 AA31E02A400F11DB9590000C2911D1B8 0\" 再次查看 partedUtil getptbl mpx.vmhba32:C0:T0:L0 格式化分区 vmkfstools -C vmfs6 -b 1m -S UsbDatastore mpx.vmhba32:C0:T0:L0:3 参考来源：https://vt.wooomooo.com/archives/39786 ","date":"2023-05-03","objectID":"/2023/05/esxi-an-zhuang/:1:0","tags":["Esxi","硬件直通"],"title":"ESXI相关","uri":"/2023/05/esxi-an-zhuang/"},{"categories":["Esxi"],"content":"SATA直通 查看SATA控制器 lspci -v | grep \"Class 0106\" -B 1 示例： [root@localhost:/dev/disks] lspci -v | grep \"Class 0106\" -B 1 0000:00:1f.2 Mass storage controller SATA controller: Intel Corporation Lynx Point AHCI Controller [vmhba0] Class 0106: 8086:8c02 编辑直通列表 vi /etc/vmware/passthru.map 在末尾添加 #Intel Corporation Lynx Point AHCI Controller 8086 8c02 d3d0 fasle 替换第二位设备ID即可 重启 reboot 参考来源：https://vt.wooomooo.com/archives/13671 ","date":"2023-05-03","objectID":"/2023/05/esxi-an-zhuang/:2:0","tags":["Esxi","硬件直通"],"title":"ESXI相关","uri":"/2023/05/esxi-an-zhuang/"},{"categories":["Esxi"],"content":"解决 未配置任何 coredump 目标。无法保存主机核心转储 查看coredump状态。 esxcli system coredump file list 看到最后一条的Actiive状态为false。 启用文件 esxcli system coredump file set -e true 5.再次查看coredump状态，已经改为true。 6.回到ESXI，告警信息已经没有了。 7.如果dumpfile不存在，要将 ESXi 配置为在 VMFS 上生成文件形式的 coredump，请执行以下操作： 使用 SSH 连接到 ESXi 主机； 运行以下命令添加用作 coredump 的新文件： esxcli system coredump file add -d可以指定用于 coredump 文件的vmfs数据存储。如果未提供此选项，将自动选择大小足够的数据存储。 -f可以指定 coredump 文件的文件名。如果未提供此选项，则会创建唯一名称。 例如： esxcli system coredump file add -d UsbDatastore -f test 运行以下命令获取具有访问权限的所有转储文件的列表： esxcli system coredump file list 您会看到类似以下内容的输出： 注意：如果没有指定 coredump 文件，则运行命令不会显示任何输出。 运行以下命令设置主机的转储文件： esxcli system coredump file set -p /vmfs/volumes/DATASTORE_UUID/vmkdump/FILENAME 例如： esxcli system coredump file set -p /vmfs/volumes/UsbDatastore/vmkdump/FCE0EAC0-D837-11DD-8EAD-F832E4BE8554.dumpfile 运行以下命令验证转储文件是否已配置并且处于活动状态： esxcli system coredump file list 您会看到类似以下内容的输出： 输出结果表明该文件的活动状态和已配置状态为 True。 ","date":"2023-05-03","objectID":"/2023/05/esxi-an-zhuang/:3:0","tags":["Esxi","硬件直通"],"title":"ESXI相关","uri":"/2023/05/esxi-an-zhuang/"},{"categories":["Esxi"],"content":"解决 系统日志存储在非持久存储中 在存储内新建存放主机日志的文件夹，并记录一下这个存储路径 例如 [UsbDatastore] Log/ 修改主机-配置-高级系统设置-编辑 修改 Syslog.global.logdir 值为新建的文件夹的存储路径 点击确定，警告消失 ","date":"2023-05-03","objectID":"/2023/05/esxi-an-zhuang/:4:0","tags":["Esxi","硬件直通"],"title":"ESXI相关","uri":"/2023/05/esxi-an-zhuang/"},{"categories":["Esxi"],"content":"开启嵌套虚拟化 vi /etc/vmware/config vhv.enable = \"TRUE\" ","date":"2023-05-03","objectID":"/2023/05/esxi-an-zhuang/:5:0","tags":["Esxi","硬件直通"],"title":"ESXI相关","uri":"/2023/05/esxi-an-zhuang/"},{"categories":[],"content":"1、安装6.4版本zabbix，以 Ubuntu 22.04、MySql、Nginx为例 wget https://repo.zabbix.com/zabbix/6.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.4-1+ubuntu22.04_all.deb sudo dpkg -i zabbix-release_6.4-1+ubuntu22.04_all.deb sudo apt update sudo apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent 2 、安装MySql 下载https://dev.mysql.com/downloads/repo/apt/并上传 或者http://mirrors.ustc.edu.cn/mysql-repo/ sudo dpkg -i mysql-apt-config_0.8.24-1_all.deb sudo apt update sudo apt install mysql-server 安装输入数据库ROOT密码，其他保持默认即可 3、配置数据库 mysql -uroot -p create database zabbix character set utf8mb4 collate utf8mb4_bin; create user zabbix@localhost identified by 'zabbix数据库密码'; grant all privileges on zabbix.* to zabbix@localhost; set global log_bin_trust_function_creators = 1; quit; 4、在Zabbix服务器主机上导入初始数据 sudo zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p zabbix 输入zabbix数据库密码 5、导入数据库架构后禁用log_bin_trust_function_creators选项。 mysql -uroot -p password mysql\u003e set global log_bin_trust_function_creators = 0; mysql\u003e quit; 6、修改zabbix的配置文件 sudo vi /etc/zabbix/zabbix_server.conf DBPassword=zabbix数据库密码 7、修改nginx配置，修改注释和端口号 sudo vi /etc/zabbix/nginx.conf sudo vi /etc/nginx/sites-available listen 80; server_name example.com; 8添加中文支持，取消UTF-8的中文注释 sudo vi /etc/locale.gen sudo locale-gen 可能需要root账户执行locale-gen。。 9、重启服务设置自启动 sudo systemctl restart zabbix-server zabbix-agent nginx php8.1-fpm sudo systemctl enable zabbix-server zabbix-agent nginx php8.1-fpm 参考链接： ","date":"2023-05-03","objectID":"/2023/05/ubuntu-an-zhuang-zabbix/:0:0","tags":["Ubuntu","zabbix"],"title":"Ubuntu安装zabbix","uri":"/2023/05/ubuntu-an-zhuang-zabbix/"},{"categories":["ospf"],"content":"一篇很早的ospf学习笔记 ospf基础 ","date":"2023-05-03","objectID":"/2023/05/ospf-ji-chu/:0:0","tags":["网络","ospf","干货"],"title":"ospf基础","uri":"/2023/05/ospf-ji-chu/"},{"categories":["ospf"],"content":"Router ID： 企业网中的设备少则几台多则几十台甚至几百台，每台路由器都需要有一个唯一的ID用于标识自己。 Router ID是一个32位的无符号整数，其格式和IP地址的格式是一样的，RouterID选举规则如下： 手动配置OSPF路由器的Router ID（通常建议手动配置）； 如果没有手动配置Router ID，则路由器使用Loopback接口中最大的IP地址作为 Router ID； 如果没有配置Loopback接口，则路由器使用物理接口中最大的IP地址作为Router ID。 OSPF的路由器Router ID重新配置后，可以通过重置OSPF进程来更新Router ID。 注：router ID只是格式为ip地址格式，只是作为名称地址可以不存在 ","date":"2023-05-03","objectID":"/2023/05/ospf-ji-chu/:0:1","tags":["网络","ospf","干货"],"title":"ospf基础","uri":"/2023/05/ospf-ji-chu/"},{"categories":["ospf"],"content":"邻居建立过程： OSPF路由器之间在交换链路状态信息之前，首先需要彼此建立邻居关系，通过Hello报文 实现。 OSPF协议通过Hello报文可以让互联的路由器间自动发现并建立邻居关系，为后续可 在形成邻居关系过程中，路由器通过Hello报文完成一些参数的协商。 邻居关系建立后，周期性的Hello报文发送还可以实现邻居保持的功能，在一定时间 内没有收到邻居的Hello报文，则会中断路由器间的OSPF邻居关系。 达性信息的同步作准备。 两种方式：组播224.0.0.5 224.0.0.6、手工单播 LSA链路状态信息 链路类型 接口ip地址及掩码 链路上所连接的邻居路由器 链路的带宽（开销） ospf 度量方式 ospf 报文类型 路由信息仅在第4种里，其他的都是摘要信息 DR角色不会被抢占，需手动重启进程 ospf的lsdb同步 状态含义： ExStart：邻居状态变成此状态以后，路由器开始向邻居发送DD报文。Master/Slave 关系是在此状态下形成的，初始DD序列号也是在此状态下确定的。在此状态下发送 的DD报文不包含链路状态描述。 Exchange：在此状态下，路由器与邻居之间相互发送包含链路状态信息摘要的DD报 文。 Loading：在此状态下，路由器与邻居之间相互发送LSR报文、LSU报文、LSAck报 文。 Full：LSDB同步过程完成，路由器与邻居之间形成了完全的邻接关系。 LSDB同步过程如下： RTA和RTB的Router ID分别为[1.1.1.1和2.2.2.2并且二者已建立了邻居关系]。当RTA 的邻居状态变为ExStart后，RTA会发送第一个DD报文。此报文中，DD序列号被随 机设置为X，I-bit设置为1，表示这是第一个DD报文，M-bit设置为1，表示后续还有 DD报文要发送，MS-bit设置为1，表示RTA宣告自己为Master。 当RTB的邻居状态变为ExStart后，RTB会发送第一个DD报文。此报文中，DD序列号 被随机设置为Y（I-bit=1，M-bit=1，MS-bit=1，含义同上）。由于RTB的Router ID较大，所以RTB将成为真正的Master。收到此报文后，RTA会产生一个 Negotiation-Done事件，并将邻居状态从ExStart变为Exchange。 当RTA的邻居状态变为Exchange后，RTA会发送一个新的DD报文，此报文中包含了 LSDB的摘要信息，序列号设置为RTB在步骤2中使用的序列号Y，I-bit=0，表示这不 是第一个DD报文，M-bit=0，表示这是最后一个包含LSDB摘要信息的DD报文， MS-bit=0，表示RTA宣告自己为Slave。收到此报文后，RTB会产生一个 Negotiation-Done事件，并将邻居状态从ExStart变为Exchange。 当RTB的邻居状态变为Exchange后，RTB会发送一个新的DD报文，此报文包含了 LSDB的摘要信息，DD序列号设置为Y+1, MS-bit=1，表示RTB宣告自己为Master。 虽然RTA不需要发送新的包含LSDB摘要信息的DD报文，但是作为Slave，RTA需要 对Master发送的每一个DD报文进行确认。所以，RTA向RTB发送一个新的DD报文， 序列号为Y+1，该报文内容为空。发送完此报文后，RTA产生一个Exchange-Done 事件，将邻居状态变为Loading。RTB收到此报文后，会将邻居状态变为Full（假设 RTB的LSDB是最新最全的，不需要向RTA请求更新）。 如果需要更新： RTA开始向RTB发送LSR报文，请求那些在Exchange状态下通过DD报文发现的、并 且在本地LSDB中没有的链路状态信息。 RTB向RTA发送LSU报文，LSU报文中包含了那些被请求的链路状态的详细信息。 RTA向RTB发送LSAck报文，作为对LSU报文的确认。RTB收到LSAck报文后，双方便 建立起了完全的邻接关系。 从建立邻居关系到同步LSDB的过程较为复杂，错误的配置或设备链路故障都会导致无法完 成LSDB同步。为了快速排障，最关键的是要理解不同状态之间切换的触发原因。 RTA在完成LSU报文的接收之后，会将邻居状态从Loading变为Full。 ospf邻居状态机制 这是形成邻居关系的过程和相关邻居状态的变换过程。 Down：这是邻居的初始状态，表示没有从邻居收到任何信息。在NBMA网络上，此 状态下仍然可以向静态配置的邻居发送Hello报文，发送间隔为PollInterval，通常和 Router DeadInterval间隔相同。 Attempt：此状态只在NBMA网络上存在，表示没有收到邻居的任何信息，但是已经 周期性的向邻居发送报文，发送间隔为HelloInterval。如果Router DeadInterval间 隔内未收到邻居的Hello报文，则转为Down状态。 Init：在此状态下，路由器已经从邻居收到了Hello报文，但是自己不在所收到的 Hello报文的邻居列表中，表示尚未与邻居建立双向通信关系。在此状态下的邻居要 被包含在自己所发送的Hello报文的邻居列表中。 2-Way Received：此事件表示路由器发现与邻居的双向通信已经开始（发现自己在 邻居发送的Hello报文的邻居列表中）。Init状态下产生此事件之后，如果需要和邻居 建立邻接关系则进入ExStart状态，开始数据库同步过程，如果不能与邻居建立邻接 关系则进入2-Way。 2-Way：在此状态下，双向通信已经建立，但是没有与邻居建立邻接关系。这是建立 邻接关系以前的最高级状态。 1-Way Received：此事件表示路由器发现自己没有在邻居发送Hello报文的邻居列 表中，通常是由于对端邻居重启造成的。 ExStart：这是形成邻接关系的第一个步骤，邻居状态变成此状态以后，路由器开始 向邻居发送DD报文。主从关系是在此状态下形成的；初始DD序列号是在此状态下决 定的。在此状态下发送的DD报文不包含链路状态描述。 Exchange：此状态下路由器相互发送包含链路状态信息摘要的DD报文，描述本地 LSDB的内容。 Loading：相互发送LS Request报文请求LSA，发送LS Update通告LSA。 Full：两台路由器的LSDB已经同步。 DR与BDR选举 规则：基于接口，接口的优先级越大越优先，优先级相等 router ID越大越优先 优先级为0不参与选举 .6只有dr或bdr接收 .5给所有的ospf接收 ","date":"2023-05-03","objectID":"/2023/05/ospf-ji-chu/:0:2","tags":["网络","ospf","干货"],"title":"ospf基础","uri":"/2023/05/ospf-ji-chu/"},{"categories":["ospf"],"content":"邻接建立过程： 路由同步后才是邻接关系 ","date":"2023-05-03","objectID":"/2023/05/ospf-ji-chu/:0:3","tags":["网络","ospf","干货"],"title":"ospf基础","uri":"/2023/05/ospf-ji-chu/"},{"categories":null,"content":"Ubuntu安装wordpress 安装 LNMP（Linux Nginx MySQL PHP）套件 sudo apt-get update sudo apt-get install nginx mysql-server php-fpm php-mysql 配置 MySQL 数据库和用户。 sudo mysql -u root -p CREATE DATABASE wordpress; CREATE USER 'wordpressuser'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpressuser'@'localhost'; FLUSH PRIVILEGES; exit 下载 WordPress 并将其解压缩到 Nginx 网站目录中 cd /var/www/ sudo wget \u003chttps://wordpress.org/latest.tar.gz\u003e sudo tar -zxvf latest.tar.gz sudo chown -R www-data:www-data /var/www/wordpress/ 配置 Nginx sudo vi /etc/nginx/sites-available/wordpress 然后将以下配置文件粘贴到该文件中，注意将 domain_name 替换为你的域名或 IP 地址： server { listen 80; listen [::]:80; root /var/www/wordpress; index index.php index.html index.htm; server_name domain_name; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\\\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; } location = /favicon.ico { log_not_found off; access_log off; } location = /robots.txt { log_not_found off; access_log off; allow all; } location ~* \\\\.(css|gif|ico|jpeg|jpg|js|png)$ { expires max; log_not_found off; } error_page 404 /404.html; error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } 保存并退出。 激活 Nginx Virtual Host sudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/ sudo service nginx restart 完成 现在你可以通过在浏览器中输入你的域名或 IP 地址来访问 WordPress 站点，并按照安装向导完成 WordPress 的设置。 一些可能遇到的问题： 如果你已经安装了默认的Nginx站点并且监听了80端口，那么将会和新的WordPress站点 监- 听同一个端口，导致冲突。在这种情况下，你需要关闭或删除默认站点以释放80端口。 你可以通过执行以下命令来关闭默认站点： sudo unlink /etc/nginx/sites-enabled/default 如果你想删除默认站点配置文件，则可以执行以下命令： 注意 删除文件是永久性的操作，请谨慎执行。 sudo rm /etc/nginx/sites-available/default ","date":"2023-05-02","objectID":"/2023/05/ubuntu-an-zhuang-wordpress/:0:0","tags":["Ubuntu","wordpress","博客"],"title":"Ubuntu安装wordpress","uri":"/2023/05/ubuntu-an-zhuang-wordpress/"},{"categories":["ip"],"content":" 在互联网寻址结构中，互联网工程任务组（IETF）和互联网号码分配局（IANA）保留了许多用于特殊目的的网际协议（IP）地址。 保留IP ","date":"2023-05-02","objectID":"/2023/05/ipv4-bao-liu-ip/:0:0","tags":["网络","保留IP","IP地址","IPv4","IPv6"],"title":"IP地址中的保留IP","uri":"/2023/05/ipv4-bao-liu-ip/"},{"categories":["ip"],"content":"IPV4 地址块 (CIDR) 范围 地址数 效用域 用途 0.0.0.0/8 0.0.0.0 – 0.255.255.255 16,777,216 软件 用于广播信息到当前主机。[1] 10.0.0.0/8 10.0.0.0 – 10.255.255.255 16,777,216 专用网络 用于专用网络中的本地通信。[2] 100.64.0.0/10 100.64.0.0 – 100.127.255.255 4,194,304 专用网络 用于在电信级NAT环境中服务提供商与其用户通信。[3] 127.0.0.0/8 127.0.0.0 – 127.255.255.255 16,777,216 主机 用于到本地主机的环回地址。[4] 169.254.0.0/16 169.254.0.0 – 169.254.255.255 65,536 链路 用于单链路的两个主机之间的链路本地地址，而没有另外指定IP地址，例如通常从DHCP服务器所检索到的IP地址。[5] 172.16.0.0/12 172.16.0.0 – 172.31.255.255 1,048,576 专用网络 用于专用网络中的本地通信。[2] 192.0.0.0/24 192.0.0.0 – 192.0.0.255 256 专用网络 用于IANA的IPv4特殊用途地址表。[6] 192.0.2.0/24 192.0.2.0 – 192.0.2.255 256 文档 分配为用于文档和示例中的“TEST-NET”（测试网），它不应该被公开使用。[7] 192.88.99.0/24 192.88.99.0 – 192.88.99.255 256 互联网 用于6to4任播中继。[8]（已废弃[9]） 192.168.0.0/16 192.168.0.0 – 192.168.255.255 65,536 专用网络 用于专用网络中的本地通信。[2] 198.18.0.0/15 198.18.0.0 – 198.19.255.255 131,072 专用网络 用于测试两个不同的子网的网间通信。[10] 198.51.100.0/24 198.51.100.0 – 198.51.100.255 256 文档 分配为用于文档和示例中的“TEST-NET-2”（测试-网-2），它不应该被公开使用。[7] 203.0.113.0/24 203.0.113.0 – 203.0.113.255 256 文档 分配为用于文档和示例中的“TEST-NET-3”（测试-网-3），它不应该被公开使用。[7] 224.0.0.0/4 224.0.0.0 – 239.255.255.255 268,435,456 互联网 用于多播。[11] 233.252.0.0/24 233.252.0.0 - 233.252.0.255 256 文档 分配为用于文档和示例中的“MCAST-TEST-NET”，它不应该被公开使用 240.0.0.0/4 240.0.0.0 – 255.255.255.254 268,435,455 互联网 用于将来使用。[12] 255.255.255.255/32 255.255.255.255 1 子网 用于受限广播地址。[12] Address block Address range Number of addresses Scope Description 0.0.0.0/8 0.0.0.0–0.255.255.255 16777216 Software Current network[3] 10.0.0.0/8 10.0.0.0–10.255.255.255 16777216 Private network Used for local communications within a private network.[4] 100.64.0.0/10 100.64.0.0–100.127.255.255 4194304 Private network Shared address space[5] for communications between a service provider and its subscribers when using a carrier-grade NAT. 127.0.0.0/8 127.0.0.0–127.255.255.255 16777216 Host Used for loopback addresses to the local host.[3] 169.254.0.0/16 169.254.0.0–169.254.255.255 65536 Subnet Used for link-local addresses[6] between two hosts on a single link when no IP address is otherwise specified, such as would have normally been retrieved from a DHCP server. 172.16.0.0/12 172.16.0.0–172.31.255.255 1048576 Private network Used for local communications within a private network.[4] 192.0.0.0/24 192.0.0.0–192.0.0.255 256 Private network IETF Protocol Assignments.[3] 192.0.2.0/24 192.0.2.0–192.0.2.255 256 Documentation Assigned as TEST-NET-1, documentation and examples.[7] 192.88.99.0/24 192.88.99.0–192.88.99.255 256 Internet Reserved.[8] Formerly used for IPv6 to IPv4 relay[9] (included IPv6 address block 2002::/16). 192.168.0.0/16 192.168.0.0–192.168.255.255 65536 Private network Used for local communications within a private network.[4] 198.18.0.0/15 198.18.0.0–198.19.255.255 131072 Private network Used for benchmark testing of inter-network communications between two separate subnets.[10] 198.51.100.0/24 198.51.100.0–198.51.100.255 256 Documentation Assigned as TEST-NET-2, documentation and examples.[7] 203.0.113.0/24 203.0.113.0–203.0.113.255 256 Documentation Assigned as TEST-NET-3, documentation and examples.[7] 224.0.0.0/4 224.0.0.0–239.255.255.255 268435456 Internet In use for IP multicast.[11] (Former Class D network.) 233.252.0.0/24 233.252.0.0-233.252.0.255 256 Documentation Assigned as MCAST-TEST-NET, documentation and examples.[11][12] 240.0.0.0/4 240.0.0.0–255.255.255.254 268435455 Internet Reserved for future use.[13] (Former Class E network.) 255.255.255.255/32 255.255.255.255 1 Subnet Reserved for the “limited broadcast” destination address.[3][14] ","date":"2023-05-02","objectID":"/2023/05/ipv4-bao-liu-ip/:1:0","tags":["网络","保留IP","IP地址","IPv4","IPv6"],"title":"IP地址中的保留IP","uri":"/2023/05/ipv4-bao-liu-ip/"},{"categories":["ip"],"content":"IPV6 地址块（CIDR） 范围 地址数 效用域 用途 ::/128 :: 1 软件 未指定地址。 ::1/128 ::1 1 主机 用于到本地主机的环回地址。 ::ffff:0:0/96 ::ffff:0:0 –::ffff:ffff:ffff(::ffff:0.0.0.0 –::ffff:255.255.255.255) 232 软件 IPv4映射地址。 100::/64 100:: –100::ffff:ffff:ffff:ffff 264 RFC 6666中废除的前缀。 64:ff9b::/96 64:ff9b::64:ff9b::ffff:ffff(64:ff9b::0.0.0.0 –64:ff9b::255.255.255.255) 232 全球互联网[13] 用于IPv4/IPv6转换。（RFC 6052） 2001::/32 2001:: –2001::ffff:ffff:ffff:ffff:ffff:ffff 296 全局 用于Teredo通道。 2001:10::/28 2001:10:: –2001:1f:ffff:ffff:ffff:ffff:ffff:ffff 2100 软件 已弃用（先前为ORCHID）。 2001:20::/28 2001:20:: –2001:2f:ffff:ffff:ffff:ffff:ffff:ffff 2100 软件 ORCHIDv2。 2001:db8::/32 2001:db8:: –2001:db8:ffff:ffff:ffff:ffff:ffff:ffff 296 文档 用于文档和示例源代码中的地址。 2002::/16 2002:: –2002:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2112 全球互联网 用于6to4。 fc00::/7 fc00:: –fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2121 专用网络 用于专用网络中的本地通信。 fe80::/10 fe80:: –febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2118 链路 用于主机之间的链路本地地址。 ff00::/8 ff00:: –ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2120 全球互联网 用于多播地址。 Address block (CIDR) First address Last address Number of addresses Usage Purpose ::/0 :: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2128 Routing Default route (no specific route) ::/128 :: :: 1 Software Unspecified address ::1/128 ::1 ::1 1 Host Loopback address—a virtual interface that loops all traffic back to itself, the local host ::ffff:0:0/96 ::ffff:0.0.0.0 ::ffff:255.255.255.255 2128 − 96 = 232 = 4294967296 Software IPv4-mapped addresses ::ffff:0:0:0/96 ::ffff:0:0.0.0.0 ::ffff:0:255.255.255.255 232 Software IPv4 translated addresses 64:ff9b::/96 64:ff9b::0.0.0.0 64:ff9b::255.255.255.255 232 Global Internet IPv4/IPv6 translation[15] 64:ff9b:1::/48 64:ff9b:1::0.0.0.0 64:ff9b:1:ffff:ffff:ffff:255.255.255.255 280 Private internets IPv4/IPv6 translation[16] 100::/64 100:: 100::ffff:ffff:ffff:ffff 264 Routing Discard prefix[17] 2001:0000::/32 2001:: 2001::ffff:ffff:ffff:ffff:ffff:ffff 296 Global Internet Teredo tunneling[18] 2001:20::/28 2001:20:: 2001:2f:ffff:ffff:ffff:ffff:ffff:ffff 2100 Software ORCHIDv2[19] 2001:db8::/32 2001:db8:: 2001:db8:ffff:ffff:ffff:ffff:ffff:ffff 296 Documentation Addresses used in documentation and example source code[20] 2002::/16 2002:: 2002:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2112 Global Internet The 6to4 addressing scheme (deprecated)[8] fc00::/7 fc00:: fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2121 Private internets Unique local address[21] fe80::/10 fe80:: fe80::ffff:ffff:ffff:ffff 264 Link Link-local address ff00::/8 ff00:: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2120 Global Internet Multicast address 来源：https://zh.wikipedia.org/wiki/保留IP地址 https://en.wikipedia.org/wiki/Reserved_IP_addresses#cite_note-rfc5771-11 ","date":"2023-05-02","objectID":"/2023/05/ipv4-bao-liu-ip/:2:0","tags":["网络","保留IP","IP地址","IPv4","IPv6"],"title":"IP地址中的保留IP","uri":"/2023/05/ipv4-bao-liu-ip/"},{"categories":null,"content":" 欢迎来到我的小站呀，很高兴遇见你！🤝 ","date":"2023-05-02","objectID":"/2023/05/about/:0:0","tags":[],"title":"关于","uri":"/2023/05/about/"},{"categories":null,"content":"👨‍💻 博主是谁 WAKE ","date":"2023-05-02","objectID":"/2023/05/about/:1:0","tags":[],"title":"关于","uri":"/2023/05/about/"},{"categories":null,"content":"⛹ 兴趣爱好 🎤 跳 rap 🏀 上面的都不喜欢, 精神不宅 身体很宅。 ","date":"2023-05-02","objectID":"/2023/05/about/:2:0","tags":[],"title":"关于","uri":"/2023/05/about/"},{"categories":null,"content":"📬 联系我呀 如果你能找到这个博客那你应该已经有了我的联系方式😜 邮箱：hi@本站域名 ","date":"2023-05-02","objectID":"/2023/05/about/:3:0","tags":[],"title":"关于","uri":"/2023/05/about/"},{"categories":null,"content":"🤔最近想做个个人网站，主要用于记笔记顺便分享，如果刚好能帮到你那可太好了。 很早之前玩过云主机，所以买过域名和主机，顺势想到了继续用原来的方法。 今天看了看阿里云和腾讯的国内外的虚拟主机和ECS真是不便宜。 然后又看了看各种博客平台。 最后终于想起来 我来 和 息流 有分享页面的功能，而且我有一些笔记已经在上面了。 于是测试了一下分享页面，还行，就是下面有广告，免费的还要什么自行车。。 于是就有了你看到的这篇文章。。 PS：目前仅仅是为了测试博客放在笔记网站的可行性，有问题的话可能还是转到云主机。 测试失败，原因是本来想用自己的域名跳转到两个软件的公开分享链接 但是不行🤡因为没办法备案。。 第二天又研究了一下发现了现在的方案 Gridea+文件托管到github+CDN加速 希望能行 目前看起来还不错，接下来会把之前写的笔记同步一部分。 最终转战wordpress。 费了一点点力气终于是搞好了，目前方案是本地wordpress转静态+文件托管github+CDN。 最终的最终还是选定了Hugo+github+CDN加速。 （CDN暂时还没上） 原因是:word press功能很强大但是对静态部署不友好。 （回头详细讲讲这一路的心路历程 flag+1） ","date":"2023-05-02","objectID":"/2023/05/di-yi-pian-bo-ke/:0:0","tags":[],"title":"第一篇博客？","uri":"/2023/05/di-yi-pian-bo-ke/"}]